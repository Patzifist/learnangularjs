def version = '1.0'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:1.0.1"
    }
}

apply plugin: 'checkstyle' // http://www.gradle.org/docs/current/dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html
apply plugin: 'cobertura'  // https://github.com/stevesaliman/gradle-cobertura-plugin
apply plugin: 'findbugs'   // http://www.gradle.org/docs/current/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
apply plugin: 'java'       // http://www.gradle.org/docs/current/userguide/java_plugin.html
apply plugin: 'jdepend'    // http://gradle.org/docs/current/dsl/org.gradle.api.plugins.quality.JDependExtension.html
apply plugin: 'maven'      // http://www.gradle.org/docs/current/userguide/maven_plugin.html
apply plugin: 'war'        // http://www.gradle.org/docs/current/userguide/war_plugin.html

repositories {
//    mavenLocal()  // This option fetches dependencies from your local .m2 directory if present, but it spams the output
    mavenCentral()
}

configurations {
    // Never include commons-logging (use SLF4J instead)
    all {
        exclude(group: 'commons-logging')
    }
}

idea.module {
    downloadSources = true
}

jar.manifest {
    attributes("Implementation-Title": "Learn AngularJS", "Implementation-Version": version)
}

dependencies {
    def cglibVersion = '2.2.2'
    def commonsLangVersion = '2.6'
    def guavaVersion = '13.0.1'
    def jacksonVersion = '2.0.6'
    def jodaTimeVersion = '2.1'
    def slf4jVersion = '1.7.0'
    def springFrameworkVersion = '3.1.2.RELEASE'
    def springSecurityVersion = '3.1.2.RELEASE'

    def commonsCliVersion = '1.2'
    def hamcrestVersion = '1.3'
    def junitVersion = '4.10'
    def mockitoVersion = '1.9.0'

    def servletApiVersion = '3.0.1'
    def tomcatVersion = '7.0.30'

    compile "org.springframework:spring-webmvc:${springFrameworkVersion}",
            "cglib:cglib:${cglibVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "org.springframework.security:spring-security-config:${springSecurityVersion}",
            "org.springframework.security:spring-security-web:${springSecurityVersion}",
            "com.google.guava:guava:${guavaVersion}",
            "commons-lang:commons-lang:${commonsLangVersion}",
            "joda-time:joda-time:${jodaTimeVersion}",
            "org.slf4j:slf4j-simple:${slf4jVersion}",
            "org.slf4j:slf4j-api:${slf4jVersion}",
            "org.slf4j:log4j-over-slf4j:${slf4jVersion}",
            "org.slf4j:jcl-over-slf4j:${slf4jVersion}"

    testCompile "junit:junit:${junitVersion}",
                "org.hamcrest:hamcrest-core:${hamcrestVersion}",
                "org.hamcrest:hamcrest-library:${hamcrestVersion}",
                "org.mockito:mockito-core:${mockitoVersion}",
                "org.springframework:spring-test:${springFrameworkVersion}",
                "commons-cli:commons-cli:${commonsCliVersion}"

    providedCompile "javax.servlet:javax.servlet-api:${servletApiVersion}",
                    "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
                    "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}",
                    "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
}

task runServiceDaemon(dependsOn: testClasses,
                      description: 'Runs the service as a daemon for scenario tests in automated build.',
                      group: 'application') << {
    logging.setLevel(LogLevel.INFO)
    def serverTimeoutMillis = 300000
    ant.parallel(timeout: serverTimeoutMillis,
                 failonany: true) {
        ant.daemons {
            ant.java(classname: 'com.thoughtworks.learnangularjs.server.TomcatServer',
                     classpath: sourceSets.test.runtimeClasspath.asPath,
                     fork: true,
                     failonerror: true,
                     timeout: serverTimeoutMillis)
        }
        ant.waitfor(maxwait: 1, maxwaitunit: 'minute', checkevery: 100, checkeveryunit: 'millisecond') {
            ant.http(url: 'http://127.0.0.1:8000/app/index.html')
        }
    }
}

task runService(dependsOn: testClasses,
                description: 'Starts up the service using Tomcat.',
                group: 'application') << {
    logging.setLevel(LogLevel.INFO)
    ant.java(classname: 'com.thoughtworks.learnangularjs.server.TomcatServer',
             classpath: sourceSets.test.runtimeClasspath.asPath,
             fork: true,
             failonerror: true)
}
