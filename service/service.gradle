def version = '1.0.0'

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.3'
  }
}

apply plugin: 'application'     // http://www.gradle.org/docs/current/userguide/application_plugin.html
//apply plugin: 'build-dashboard' //http://www.gradle.org/docs/current/userguide/buildDashboard_plugin.html
//apply plugin: 'checkstyle'      // http://www.gradle.org/docs/current/dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html
//apply plugin: 'findbugs'        // http://www.gradle.org/docs/current/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
apply plugin: 'java'            // http://www.gradle.org/docs/current/userguide/java_plugin.html
//apply plugin: 'jdepend'         // http://gradle.org/docs/current/dsl/org.gradle.api.plugins.quality.JDependExtension.html
apply plugin: 'maven'           // http://www.gradle.org/docs/current/userguide/maven_plugin.html
apply plugin: 'project-report'  // http://www.gradle.org/docs/current/userguide/project_reports_plugin.html
apply plugin: 'versions'        // https://github.com/ben-manes/gradle-versions-plugin
apply plugin: 'war'             // http://www.gradle.org/docs/current/userguide/war_plugin.html

mainClassName = 'com.thoughtworks.learnangularjs.server.TomcatServer'

idea.module {
    // add test source directories for the integrationTest source set
    testSourceDirs += file('src/integration-test/java')
    testSourceDirs += file('src/integration-test/resources')

    downloadSources = true  // tells Ivy to download sources jar files as well
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')

        // integration tests can use classes and resources from main and test sourceSet
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

configurations {
    all {
        exclude(group: 'commons-logging')  // Never include commons-logging (use SLF4J instead)
        exclude(group: 'log4j')  // Never include log4j (use SLF4J instead)
    }

    // use these configurations to specify dependencies only used by integration tests (and not by unit tests)
    integrationTestCompile { extendsFrom testCompile }
    integrationTestRuntime { extendsFrom integrationTestCompile, testRuntime }
}

jar.manifest {
    attributes("Implementation-Title": "Learn AngularJS", "Implementation-Version": version)
}

// Add to the end of the existing processResources task from the Gradle Java plugin
// http://gradle.org/docs/current/userguide/tutorial_using_tasks.html#N102B2
processResources << {
    // Workaround for Tomcat. Tomcat requires META-INF to be a non-empty subdirectory of
    // build/classes/main in order for Servlet 3.0 Application Initializer scanning to work
    copy {
        // http://gradle.org/docs/current/userguide/working_with_files.html
        from "src/main/resources/META-INF/dummy-file-required-by-tomcat.txt"
        into "${sourceSets.main.output.classesDir}/META-INF"
    }
}

dependencies {
    def cglibVersion = '2.2.2'
    def commonsLang3Version = '3.1'
    def guavaVersion = '14.0.1'
    def jacksonVersion = '2.2.2'
    def jodaTimeVersion = '2.2'
    def jsonPathVersion = '0.8.1'
    def jsr250ApiVersion = '1.0'
    def slf4jVersion = '1.7.5'
    def logbackVersion = '1.0.13'
    def springFrameworkVersion = '3.2.4.RELEASE'
    def springSecurityVersion = '3.1.4.RELEASE'
    def urlRewriteFilterVersion = '4.0.4'

    def commonsCliVersion = '1.2'
    def hamcrestVersion = '1.3'
    def hamcrestReflectionVersion = '0.1'
    def junitVersion = '4.11'
    def mockitoVersion = '1.9.5'
    def hamcrestJsonVersion = '0.2'

    def tomcatVersion = '7.0.42'

    compile "org.springframework:spring-webmvc:${springFrameworkVersion}",
            "cglib:cglib:${cglibVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jacksonVersion}",
            "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jacksonVersion}",
            "com.fasterxml.jackson.module:jackson-module-afterburner:${jacksonVersion}",
            "org.springframework.security:spring-security-config:${springSecurityVersion}",
            "org.springframework.security:spring-security-web:${springSecurityVersion}",
            "javax.annotation:jsr250-api:${jsr250ApiVersion}",
            "com.google.guava:guava:${guavaVersion}",
            "org.apache.commons:commons-lang3:${commonsLang3Version}",
            "joda-time:joda-time:${jodaTimeVersion}",
            "com.jayway.jsonpath:json-path:${jsonPathVersion}",
//            "ch.qos.logback:logback-classic:${logbackVersion}",
            "org.slf4j:slf4j-simple:${slf4jVersion}",
            "org.slf4j:slf4j-api:${slf4jVersion}",
            "org.slf4j:log4j-over-slf4j:${slf4jVersion}",
            "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
            "org.tuckey:urlrewritefilter:${urlRewriteFilterVersion}"

    testCompile "junit:junit:${junitVersion}",
                "org.hamcrest:hamcrest-core:${hamcrestVersion}",
                "org.hamcrest:hamcrest-library:${hamcrestVersion}",
                "com.natpryce.hamcrest:hamcrest-reflection:${hamcrestReflectionVersion}",
                "org.mockito:mockito-core:${mockitoVersion}",
                "org.springframework:spring-test:${springFrameworkVersion}",
                "commons-cli:commons-cli:${commonsCliVersion}",
                "com.jayway.jsonpath:json-path-assert:${jsonPathVersion}",
                "uk.co.datumedge:hamcrest-json:${hamcrestJsonVersion}"

    providedCompile "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
                    "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}",
                    "org.apache.tomcat.embed:tomcat-embed-logging-log4j:${tomcatVersion}"
}

task integrationTest(type: Test,
                     dependsOn: testClasses,
                     description: 'Runs the integration tests.',
                     group: 'verification') {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest

task runServiceDaemon(dependsOn: testClasses,
                      description: 'Runs the service as a daemon for scenario tests in automated build.',
                      group: 'application') << {
    logging.setLevel(LogLevel.INFO)
    def serverTimeoutMillis = 300000
    ant.parallel(timeout: serverTimeoutMillis,
                 failonany: true) {
        ant.daemons {
            ant.java(classname: 'com.thoughtworks.learnangularjs.server.TomcatServer',
                     classpath: sourceSets.test.runtimeClasspath.asPath,
                     fork: true,
                     failonerror: true,
                     timeout: serverTimeoutMillis)
        }
        ant.waitfor(maxwait: 1, maxwaitunit: 'minute', checkevery: 100, checkeveryunit: 'millisecond') {
            ant.http(url: 'http://127.0.0.1:8000/app/index.html')
        }
    }
}

task runService(dependsOn: testClasses,
                description: 'Starts up the service using Tomcat.',
                group: 'application') << {
    logging.setLevel(LogLevel.INFO)
    ant.java(classname: 'com.thoughtworks.learnangularjs.server.TomcatServer',
             classpath: sourceSets.test.runtimeClasspath.asPath,
             fork: true,
             failonerror: true)
}
