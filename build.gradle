apply plugin: 'idea'           // http://www.gradle.org/docs/current/userguide/idea_plugin.html

subprojects {
    apply plugin: 'idea'
}

// Ensure the IWS Workspace file is also deleted (this is not the default)
task cleanIdea(dependsOn: [cleanIdeaProject, cleanIdeaWorkspace, cleanIdeaModule],
               type: Delete,
               overwrite: true,
               description: 'Cleans IDEA project files (IML, IPR, IWS)',
               group: 'IDE')

task clean(description: 'Deletes the build directory produced by Gradle and the out directory produced by IntelliJ IDEA.',
           group: 'build') << {
    delete "${buildDir}", 'out'
}

// Tell IntelliJ IDEA that the VCS for this project is Git
idea.project.ipr {
    withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
    }
}

def startServiceRunConfiguration = '''
    <configuration default="false" name="Run Service" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="com.thoughtworks.learnangularjs.server.TomcatServer" />
      <option name="VM_PARAMETERS" value="" />
      <option name="PROGRAM_PARAMETERS" value="" />
      <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$/service" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" value="" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="service" />
      <envs />
      <RunnerSettings RunnerId="Run" />
      <ConfigurationWrapper RunnerId="Run" />
      <method />
    </configuration>
'''

def startStubServiceRunConfiguration = '''
    <configuration default="false" name="Run Stub Service" type="NodeJSConfigurationType" factoryName="Node JS" path-to-node="/usr/local/bin/node" path-to-js-file="stubservice.js" working-dir="$PROJECT_DIR$/stubservice">
      <RunnerSettings RunnerId="NodeJS.run" />
      <ConfigurationWrapper RunnerId="NodeJS.run" />
      <method />
    </configuration>
'''

def clientUnitTestRunConfiguration = '''
    <configuration default="false" name="Client Unit Tests" type="JSTestDriver:ConfigurationType" factoryName="JsTestDriver">
      <setting name="configLocationType" value="CONFIG_FILE" />
      <setting name="settingsFile" value="$PROJECT_DIR$/client/unit.jstd" />
      <setting name="serverType" value="INTERNAL" />
      <RunnerSettings RunnerId="JsTestDriverClientRunner" />
      <ConfigurationWrapper RunnerId="JsTestDriverClientRunner" />
      <method />
    </configuration>
'''

def e2eTestRunConfiguration = '''
    <configuration default="false" name="E2E Scenario Tests" type="JSTestDriver:ConfigurationType" factoryName="JsTestDriver">
      <setting name="configLocationType" value="CONFIG_FILE" />
      <setting name="settingsFile" value="$PROJECT_DIR$/client/e2e.jstd" />
      <setting name="serverType" value="INTERNAL" />
      <RunnerSettings RunnerId="JsTestDriverClientRunner" />
      <ConfigurationWrapper RunnerId="JsTestDriverClientRunner" />
      <method />
    </configuration>
'''

def serviceUnitTestRunConfiguration = '''
    <configuration default="false" name="Service Unit Tests" type="JUnit" factoryName="JUnit">
      <module name="service" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" value="" />
      <option name="PACKAGE_NAME" value="" />
      <option name="MAIN_CLASS_NAME" value="" />
      <option name="METHOD_NAME" value="" />
      <option name="TEST_OBJECT" value="directory" />
      <option name="VM_PARAMETERS" value="" />
      <option name="PARAMETERS" value="" />
      <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$/service" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="moduleWithDependencies" />
      </option>
      <envs />
      <dir value="$PROJECT_DIR$/service/src/test/java" />
      <patterns />
      <RunnerSettings RunnerId="Run" />
      <ConfigurationWrapper RunnerId="Run" />
      <method />
    </configuration>
'''

def serviceIntegrationTestRunConfiguration = '''
    <configuration default="false" name="Service Integration Tests" type="JUnit" factoryName="JUnit">
      <extension name="coverage" enabled="false" merge="false" runner="idea" />
      <module name="service" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" value="" />
      <option name="PACKAGE_NAME" value="" />
      <option name="MAIN_CLASS_NAME" value="" />
      <option name="METHOD_NAME" value="" />
      <option name="TEST_OBJECT" value="directory" />
      <option name="VM_PARAMETERS" value="" />
      <option name="PARAMETERS" value="" />
      <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$/service" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="moduleWithDependencies" />
      </option>
      <envs />
      <dir value="$PROJECT_DIR$/service/src/integration-test/java" />
      <patterns />
      <RunnerSettings RunnerId="Run" />
      <ConfigurationWrapper RunnerId="Run" />
      <method />
    </configuration>
'''

idea.workspace.iws {
    withXml { workspace ->
        // Add run configurations
        def runManagerComponentNode = workspace.node.component.find { it.@name == 'RunManager' }
        runManagerComponentNode.append(new XmlParser().parseText(startServiceRunConfiguration))
        runManagerComponentNode.append(new XmlParser().parseText(startStubServiceRunConfiguration))
        runManagerComponentNode.append(new XmlParser().parseText(clientUnitTestRunConfiguration))
        runManagerComponentNode.append(new XmlParser().parseText(e2eTestRunConfiguration))
        runManagerComponentNode.append(new XmlParser().parseText(serviceUnitTestRunConfiguration))
        runManagerComponentNode.append(new XmlParser().parseText(serviceIntegrationTestRunConfiguration))
    }
}
