def version = '1.0.0'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.1'
    }
}

apply plugin: 'js'

// Ensure this subproject becomes an IntelliJ IDEA Web Module rather than a Java Module
idea.module.iml {
    withXml { module ->
        module.node.@type = 'WEB_MODULE'
        module.node.component.orderEntry.find { it.@type == 'inheritedJdk' }.replaceNode {}
    }
}

task clean(description: 'Deletes the build directory.',
           group: 'build') << {
    delete "${buildDir}"
}

task test(description: 'Runs the unit tests.',
          group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    def unitTestReportDir = "${buildDir}/jstd-unit-reports"
    mkdir unitTestReportDir  // must be created before jstd is run
    println '-------------------------------------------'
    println ' J S  T E S T  D R I V E R  -  U N I T     '
    println '-------------------------------------------'
    ant.java(jar: 'support/jstestdriver-1.3.3d.jar',
             fork: true,
             failonerror: true,
             timeout: 60000) {
        ant.arg(value: '--browser')
        ant.arg(value: 'phantomjs;support/phantomjs-jstd-bridge.js')
        ant.arg(value: '--captureConsole')
        ant.arg(value: 'true')
        ant.arg(value: '--config')
        ant.arg(value: 'unit.jstd')
        ant.arg(value: '--port')
        ant.arg(value: '9879')
        ant.arg(value: '--testOutput')
        ant.arg(value: unitTestReportDir)
        ant.arg(value: '--tests')
        ant.arg(value: 'all')
    }
}

def executeScenarioTests() {
    def e2eTestReportDir = "${buildDir}/jstd-e2e-reports"
    mkdir e2eTestReportDir  // must be created before jstd is run
    println '-------------------------------------------'
    println ' J S  T E S T  D R I V E R  -  E 2 E       '
    println '-------------------------------------------'
    ant.java(jar: 'support/jstestdriver-1.3.3d.jar',
             fork: true,
             failonerror: true,
             timeout: 300000) {
        ant.arg(value: '--browser')
        ant.arg(value: 'phantomjs;support/phantomjs-jstd-bridge.js')
        ant.arg(value: '--captureConsole')
        ant.arg(value: 'true')
        ant.arg(value: '--config')
        ant.arg(value: 'e2e.jstd')
        ant.arg(value: '--port')
        ant.arg(value: '9880')
        ant.arg(value: '--testOutput')
        ant.arg(value: e2eTestReportDir)
        ant.arg(value: '--tests')
        ant.arg(value: 'all')
    }
}

task scenariotest(dependsOn: ':service:runServiceDaemon',
                  description: 'Runs the scenario tests against the real service.',
                  group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    executeScenarioTests()
}

task scenarioteststub(dependsOn: ':stubservice:runServiceDaemon',
                      description: 'Runs the scenario tests against the stub service.',
                      group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    executeScenarioTests()
}

task jshint(overwrite: true,
            description: 'Runs JSHint on the main source files.',
            group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' J S  H I N T                              '
    println '-------------------------------------------'
    ant.taskdef(name: 'jshint', classname: 'com.philmander.jshint.JsHintAntTask', classpath: 'support/ant-jshint-0.3.1.jar')
    ant.jshint(dir: 'src/main/webapp/js',
               globals: 'jQuery=true, $=true, angular=true',
               optionsFile: "${projectDir}/support/jshint-options.properties") {
        ant.include(name: 'app/**/*.js')
        ant.exclude(name: 'lib/**/*.js')
        ant.report(type: 'xml', destFile: "${buildDir}/jshint-report.xml")
    }
}

task check(dependsOn: [jshint, test, scenariotest],
           description: 'Runs all checks.',
           group: 'verification')
