def version = '1.0.0'

// Download NodeJS dependencies
def resolveDependencies() {
    ant.exec(executable: 'npm',
            failonerror: true) {
        ant.arg(value: 'install')
    }
}

ideaModule << {
    logging.setLevel(LogLevel.INFO)
    resolveDependencies()
}

// Ensure this subproject becomes an IntelliJ IDEA Web Module rather than a Java Module
idea.module.iml {
    withXml { module ->
        module.node.@type = 'WEB_MODULE'
        module.node.component.orderEntry.find { it.@type == 'inheritedJdk' }.replaceNode {}
    }
}

task resolve(description: 'Installs NodeJS dependencies',
        group: 'build') << {
    logging.setLevel(LogLevel.INFO)
    resolveDependencies()
}

task clean(description: 'Deletes the build directory.',
           group: 'build') << {
    delete "${buildDir}"
}

task autotest(description: 'Runs the unit tests every time a file changes.',
          group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' U N I T  T E S T S - C O N T I N U O U S  '
    println '-------------------------------------------'
    ant.exec(executable: 'node_modules/karma/bin/karma',
            failonerror: true) {
        ant.arg(value: 'start')
        ant.arg(value: 'support/unit.conf.js')
        ant.arg(value: '--no-single-run')
        ant.arg(value: '--reporters')
        ant.arg(value: 'progress')
    }
}

task test(description: 'Runs the unit tests.',
          group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' U N I T  T E S T S                        '
    println '-------------------------------------------'
    ant.exec(executable: 'node_modules/karma/bin/karma',
            failonerror: true) {
        ant.arg(value: 'start')
        ant.arg(value: 'support/unit.conf.js')
        ant.arg(value: '--single-run')
    }
}

def executeScenarioTests() {
    println '-------------------------------------------'
    println ' E 2 E  T E S T S                          '
    println '-------------------------------------------'
    ant.exec(executable: 'node_modules/karma/bin/karma',
            failonerror: true) {
        ant.arg(value: 'start')
        ant.arg(value: 'support/e2e.conf.js')
        ant.arg(value: '--single-run')
    }
}

task scenarioTest(dependsOn: ':service:runServiceDaemon',
                  description: 'Runs the scenario tests against the real service.',
                  group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    executeScenarioTests()
}

task scenarioTestStub(dependsOn: ':stubservice:runServiceDaemon',
                      description: 'Runs the scenario tests against the stub service.',
                      group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    executeScenarioTests()
}

task jshint(description: 'Runs JSHint on the main application source files.',
            group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' J S  H I N T                              '
    println '-------------------------------------------'
    ant.exec(executable: 'node_modules/jshint/bin/jshint',
            failonerror: true) {
        ant.arg(value: '--config')
        ant.arg(value: 'support/jshint-options.json')
        ant.arg(value: 'src/main/webapp/js/app')
    }
}

task check(dependsOn: [jshint, test, scenarioTest],
           description: 'Runs all checks.',
           group: 'verification')

task checkStub(dependsOn: [jshint, test, scenarioTestStub],
               description: 'Runs all checks with stub service.',
               group: 'verification')
