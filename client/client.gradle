def version = '1.0.0'

// Download NodeJS dependencies
def resolveDependencies() {
    ant.exec(executable: 'npm',
            failonerror: true) {
        ant.arg(value: 'install')
//        ant.arg(value: '--silent')
    }
}

ideaModule << {
    logging.setLevel(LogLevel.INFO)
    resolveDependencies()
}

// Ensure this subproject becomes an IntelliJ IDEA Web Module rather than a Java Module
idea.module.iml {
    withXml { module ->
        module.node.@type = 'WEB_MODULE'
        module.node.component.orderEntry.find { it.@type == 'inheritedJdk' }.replaceNode {}
    }
}

task resolve(description: 'Installs NodeJS dependencies',
             group: 'build') << {
    logging.setLevel(LogLevel.INFO)
    resolveDependencies()
}

task clean(description: 'Deletes the build directory.',
           group: 'build') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' C L E A N                                 '
    println '-------------------------------------------'
    delete "${buildDir}"
}

task autotest(dependsOn: 'resolve',
              description: 'Runs the unit tests every time a file changes.',
              group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' U N I T  T E S T S - C O N T I N U O U S  '
    println '-------------------------------------------'
    ant.exec(executable: 'node', failonerror: true) {
        ant.arg(value: 'node_modules/karma/bin/karma')
        ant.arg(value: 'start')
        ant.arg(value: 'support/unit.conf.js')
        ant.arg(value: '--no-single-run')
        ant.arg(value: '--reporters')
        ant.arg(value: 'progress')
    }
}

task test(dependsOn: 'resolve',
          description: 'Runs the unit tests.',
          group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' U N I T  T E S T S                        '
    println '-------------------------------------------'
    ant.exec(executable: 'node', failonerror: true) {
        ant.arg(value: 'node_modules/karma/bin/karma')
        ant.arg(value: 'start')
        ant.arg(value: 'support/unit.conf.js')
        ant.arg(value: '--single-run')
    }
}

def executeScenarioTests() {
    println '-------------------------------------------'
    println ' E 2 E  T E S T S                          '
    println '-------------------------------------------'
    ant.exec(executable: 'node', failonerror: true) {
        ant.arg(value: 'node_modules/karma/bin/karma')
        ant.arg(value: 'start')
        ant.arg(value: 'support/e2e.conf.js')
        ant.arg(value: '--single-run')
    }
}

task jshint(dependsOn: 'resolve',
            description: 'Runs JSHint on the main application source files.',
            group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' J S  H I N T                              '
    println '-------------------------------------------'
    ant.exec(executable: 'node', failonerror: true) {
        ant.arg(value: 'node_modules/jshint/bin/jshint')
        ant.arg(value: '--config')
        ant.arg(value: 'support/jshint-options.json')
        ant.arg(value: 'src/main/webapp/js/app')
    }
}

task autojade(dependsOn: 'resolve',
              description: 'Watch the Jade templates for changes and regenerate HTML partials when there is a change.',
              group: 'build') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' J A D E - C O N T I N U O U S             '
    println '-------------------------------------------'
    ant.exec(executable: 'node', failonerror: true) {
        ant.arg(value: 'node_modules/jade/bin/jade')
        ant.arg(value: '--watch')
        ant.arg(value: '--pretty')
        ant.arg(value: '--out')
        ant.arg(value: 'src/main/webapp/partials')
        ant.arg(value: 'src/main/webapp/views')
    }
}

task jade(dependsOn: 'resolve',
          description: 'Generates HTML partials from the Jade templates.',
          group: 'build') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' J A D E                                   '
    println '-------------------------------------------'
    ant.exec(executable: 'node', failonerror: true) {
        ant.arg(value: 'node_modules/jade/bin/jade')
        ant.arg(value: '--pretty')
        ant.arg(value: '--out')
        ant.arg(value: 'src/main/webapp/partials')
        ant.arg(value: 'src/main/webapp/views')
    }
}

task autoless(dependsOn: 'resolve',
              description: 'Watch the LESS files for changes and regenerate CSS files when there is a change.',
              group: 'build') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' L E S S - C O N T I N U O U S             '
    println '-------------------------------------------'
    file('src/main/webapp/css').mkdirs()
    ant.exec(executable: 'node', failonerror: true) {
        ant.arg(value: 'node_modules/recess/bin/recess')
        ant.arg(value: 'src/main/webapp/less/app.less:src/main/webapp/css/app.css')
        ant.arg(value: '--watch')
        ant.arg(value: 'src/main/webapp/less')
    }
}

task less(dependsOn: 'resolve',
          description: 'Generates CSS files from the LESS files.',
          group: 'build') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' L E S S  C O M P I L E                    '
    println '-------------------------------------------'
    file('src/main/webapp/css').mkdirs()
    ant.exec(executable: 'node',
             failonerror: true,
             output: 'src/main/webapp/css/app.css',
             logError: true) {
        ant.arg(value: 'node_modules/recess/bin/recess')
        ant.arg(value: 'src/main/webapp/less/app.less')
        ant.redirector(outputproperty: 'lesscompile.out', alwayslog: true)
    }
    ant.condition(property: 'lesscompile.failure') {
        ant.matches(string: '${lesscompile.out}', pattern: '(failure|error)')
    }
    ant.fail(if: 'lesscompile.failure', message: 'Compiling LESS files to CSS failed')
}

task lesslint(dependsOn: 'resolve',
              description: 'Lints CSS and LESS files.',
              group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    println '-------------------------------------------'
    println ' L E S S  L I N T                          '
    println '-------------------------------------------'
    ant.exec(executable: 'node', failonerror: true) {
        ant.arg(value: 'node_modules/recess/bin/recess')
        ant.arg(value: 'src/main/webapp/less/app.less')
        ant.arg(value: '--noIDs')
        ant.arg(value: 'false')
        ant.redirector(outputproperty: 'lesslint.out', alwayslog: true)
    }
    ant.condition(property: 'lesslint.failure') {
        ant.matches(string: '${lesslint.out}', pattern: '(failure|error)')
    }
    ant.fail(if: 'lesslint.failure', message: 'Linting of LESS files failed')
}

task scenarioTest(dependsOn: [jade, less, ':service:runServiceDaemon'],
                  description: 'Runs the scenario tests against the real service.',
                  group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    executeScenarioTests()
}

task scenarioTestStub(dependsOn: [jade, less, ':stubservice:runServiceDaemon'],
                      description: 'Runs the scenario tests against the stub service.',
                      group: 'verification') << {
    logging.setLevel(LogLevel.INFO)
    executeScenarioTests()
}

task check(dependsOn: [jshint, lesslint, test, scenarioTest],
           description: 'Runs all checks.',
           group: 'verification')

task checkStub(dependsOn: [jshint, lesslint, test, scenarioTestStub],
               description: 'Runs all checks with stub service.',
               group: 'verification')

task assemble(dependsOn: [resolve, jade, less],
              description: 'Prepares all prerequisites',
              group: 'build')
